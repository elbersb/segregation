// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compress_compute_cpp
List compress_compute_cpp(StringMatrix m_neighbors, NumericMatrix m_data, StringVector unit_names, int max_iter);
RcppExport SEXP _segregation_compress_compute_cpp(SEXP m_neighborsSEXP, SEXP m_dataSEXP, SEXP unit_namesSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type m_neighbors(m_neighborsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m_data(m_dataSEXP);
    Rcpp::traits::input_parameter< StringVector >::type unit_names(unit_namesSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(compress_compute_cpp(m_neighbors, m_data, unit_names, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_segregation_compress_compute_cpp", (DL_FUNC) &_segregation_compress_compute_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_segregation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
